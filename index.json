{
  "home/users.html": {
    "href": "home/users.html",
    "title": "Users",
    "keywords": "Users The Administrator can navigate to the Users section on the portal, create more users and invite them to access the organisation using the URL link. This way the administrator is in control of who receives the URL link and which users can access the organisation. The users can access his Organisation only, view their user profile and change their password. Should the users requires access to the source code repository they need to provide their public SSH Keys on the user profile section to gain access."
  },
  "home/what-is-devx.html": {
    "href": "home/what-is-devx.html",
    "title": "What is Temenos Development Platform?",
    "keywords": "What is Temenos Development Platform? Development Platform is a product within the Temenos Cloud suite, and is cloud based infrastructure for use during development, test, implementation, and ongoing change with configurable and scalable Temenos Suites on-demand, unless otherwise stated. Development Platform enables you to create Environments, i.e. Temenos Suites on-demand, for non-production use in the cloud. Environments can be requested and provisioned within minutes rather than weeks helping you accelerate your projects. Retail Suite is readily available, with all other Temenos Suites (Corporate, Wealth, Micro-Finance and Islamic Banking) available on request and allows you to develop and test your proof of concept, share development environments across dispersed teams, replicate production environments or use them for training. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity."
  },
  "home/techguides/access-ud-directories.html": {
    "href": "home/techguides/access-ud-directories.html",
    "title": "Access T24 UD Directories",
    "keywords": "Access T24 UD Directories Learn how to easily access the T24 UD directories of your sandbox and make updates, without the need of exporting zip files, but using symbolic links on the SFTP server to the T24 VM machines. Note Check also our Video tutorial Create New Environment Login to https://portal.temenos.cloud/ Each time you login, you must accept the Privacy Notice in order to have access to the portal The first page that is displayed after login is the Environments list Click New environment button Fill the mandatory fields: Name Description Select an application from Cloud native applications Choose a template from Templates list Labels field is optional Click Create environment Note It will take about 15 minutes for the new environment to be created Create a User on the Portal This is required later when connecting to T24 through SFTP server connection, because it checks the authentication to the cloud environment with that specific user and the attached SSH key. To see all the steps regarding how to add a new user on the portal and to attach the SSH key, please see the following user guide about how to Create Users . Connect via SFTP Client In order to have access to the T24/ VM Cloud Application live folders, you can install an FTP client from https://winscp.net/eng/index.php Open WinSCP application and fill the mandatory fields: Host name > copy it from the environment endpoint: sftp.temenos.cloud User name > input the exact name of the user added to the portal Click Advanced In the new screen, select SSH Authentication Upload the private key previously saved (corresponding to the public key attached to the portal user) Click OK Previous screen pops-up, click Login Check and Use Live Folders After logging in, on the right window, locate your envirnoment ID Double click to access the live folders of the environment You will be able to see and access the following T24 live folders structure: default - for example, here you can push a message file into the application that you need to test log_t24 como - it will load TSA logs when running different TSA services T24.log - refers to the T24 BrowserWeb processes standalone/server.log - shows the Jboss application log To see how you can push a message to be processed by an application, check this FCM example . Note Make sure you place the files in the appropriate folder belonging to the specific application that you want to use"
  },
  "home/techguides/add-app-endpoint.html": {
    "href": "home/techguides/add-app-endpoint.html",
    "title": "Create new application endpoint",
    "keywords": "Create new application endpoint This document can be used by technical staff who need to add new endpoints to the T24 application of a Dev Environment in case of deploying a plugin in the application server of the Dev Environment. Note This guide presumes that a Dev Environment is already created and available. Two properties are mandatory to create a new endpoint: Property Name Property Description Endpoint Description The Endpoint Description will be displayed in your Organisation Portal in the Endpoints section of the T24 application from your Dev Environment. Endpoint URL The Endpoint URL will be automatically concatenated with the Hostname of your Dev Environment and opened in a new tab of your browser when the Endpoint Description is clicked. Endpoint URL must always start with \"/\" character. In order to create new endpoints for the T24 application of your Dev Environment, the following steps must be followed: Clone the GitLab repository of your Dev Environment in your local machine. For more details on how to clone a repository, check this page . Create a file with .endpoint extension inside plugins folder of the cloned repository as in the bellow picture. The name of the file is not important, but it should relate to the plugin for which endpoints are added. Inside the .endpoint file, add a new line for each endpoint with the structure Your_Endpoint_Description~/Your_Endpoint_URL , as per bellow picture. Note \" ~ \" character is used as a separator between Endpoint Description and URL properties and it must always be present in each endpoint line. After creating and editing the .endpoint file, commit the file to the GitLab repository of your Dev Environment. Wait until the .endpoint file is deployed in your Dev Environment and check the Endpoints section of the T24 application where Your_Endpoint_Description Endpoint is displayed as bellow. When the new Endpoint is clicked, the URL opened in a new tab is based on the Hostname of the Dev Environment and the Endpoint URL property from the .endpoint file. Add multiple endpoints from a single file If a plugin has more than one endpoint, create a .endpoint file and add a separate line for each endpoint item, as bellow. After the file is deployed, all 3 endpoints from the example are displayed in the Endpoints section of the T24 application. Add multiple endpoints from multiple files in the same time If you want to add endpoints for multiple plugins deployed in your Dev Environment, you can add the endpoints of all plugins in a single file or you can also create a separate .endpoint file for each plugin for a better delimitation. After both files are deployed, the 3 endpoints for plugin 1 and the 2 endpoints for plugin 2 are displayed in the Endpoints section of the T24 application. Update/Remove endpoints If you want to update endpoints that were already added to an application, you just have to update the required endpoint line from the .endpoint file, commit the file to the GitLab repository of your Dev Environment and after the file is deployed, the required endpoint will be updated in the Endpoints section of your Application. If you want to remove endpoints that were already added to an application, you just have to remove the required endpoint line from the .endpoint file, commit the file to the GitLab repository of your Dev Environment and after the file is deployed, only the endpoints available in the .endpoint file will be displayed in the Endpoints section of your Application. Note To summarize, the list of plugin endpoints displayed in the Endpoints section for an application is updated based on the content of .endpoint files available in the plugins folder from the GitLab repository of your Dev Environment. If no .endpoint files are available in the GitLab repository of your Dev Environment, then no plugin endpoints will be displayed."
  },
  "home/techguides/customize-templates.html": {
    "href": "home/techguides/customize-templates.html",
    "title": "Templates Customization",
    "keywords": "Templates Customization Introduction This document can be used by technical staff who need to customize already defined PaaS templates based on specific requirements. Templates customization will allow changes related to: the environment applications (i.e. the scripts to install and configure each application and the information displayed in PaaS Portal for each application); the VM specifications in which each application is deployed. Note This guide presumes that a Sandbox is already created and available under an Organisation for which the templates customization functionality is allowed. Boost your environment To start customizing your environment built using a PaaS template, login to PaaS portal using your organisation user, go to your environment page and click on the Boost button attached to Repository application. After clicking the Boost button, the status of Repository application is changed to Boosting , as per bellow picture. The operation triggered by the Boost button will copy in environment repository all the template files used to create the environment. When the Boosting operation is finished, the message \"Scripts are customized for this environment.\" is displayed under the name of your environment. Repository structure after Boost As stated above, the Boost operation will make changes to environment repository. The difference between the before and after boost environment repository versions is represented by the presence of environments folder, as it can be observed bellow. The structure of the environments folder is represented by 3 folders: infra-templates playbooks roles The description of each folder is presented bellow: Folder Name Folder Description infra-templates This folder contains an infratemplate.yml file that describes the template of your environment (i.e. information related to the applications that are installed in your environment and VM specifications in which environment applications are deployed.). playbooks This folder contains a playbook.yml file that describes the set of roles that will be installed for each host(VM) defined under [services][servers] component in infratemplate.yml file. roles This folder contains all the roles defined for your template. A role represents any of your environment applications or it can be a module/plugin/framework that is required for your environment applications. A role is described by the following folders: defaults - contains default variables for the role. files - contains the files which are deployed using this role. handlers - contains handlers that are used by this role. meta - defines meta data for this role. tasks - contains the list of tasks that is executed for this role. templates - contains templates that can be deployed using this role. vars - contains the role variables. Note A role definition must include at least one of the above folders. Thus, any unused folders can be excluded. However, any in use folder must include a main.yml file that contains the relevant information. Note Ansible automation tool is used by the PaaS Platform to automate environment creation based on applications with specific requirements and installation steps. For more details about Ansible, please access this link . Start template customization After boosting your environment, meaning that your environment repository contains all the folders and files related to your environment template, you can start the customization. There are several ways in which you can customize your environment template based on the type of your change. Note All the changes that must be implemented to a PaaS environment template can be done only in environment repository . Thus, environment repository must be cloned in your local machine. For more information about how to clone an environment repository, please check this page . Changes that will require the rebuild of your environment : Note The rebuild operation will take around 20 minutes and it will recreate all environment resources(VMs) and run the deployment of all roles defined in environment template. To trigger the rebuild of your environment, login to PaaS portal using your organisation user, go to your environment page and click on the Rebuild button attached to your environment main application. Changes related to applications that will be installed under your environment. The applications list is defined in [services][servers] component from infratemplate.yml file located in /environments/common/infra-templates folder of environment repository. An example of a template with 2 applications (t24 & h2) is presented bellow. -> If an application must be removed from the default application list of the template, then the corespondent item must be removed from [services][servers] component and the item related to the application must be removed from playbook.yml file from /environments/common/playbooks folder. -> If an application must be added to the default application list of the template, then a new item must be added in [services][servers] component. After this, a new role must be created for this application in /environments/common/roles folder of environment repository and playbook.yml file from /environments/common/playbooks must be updated with a new item for the new application. Changes related to applications information (name, description, etc.) displayed in PaaS Portal. Each environment application has a related item in [services][servers] component from infratemplate.yml file. Please check the description of each key (e.g. app_name , app_description , etc.) in infratemplate.yml file in order to understand which information appear in PaaS Portal. Changes related to VM specifications in which environment applications are deployed. The VM specifications on which each environment application is deployed are defined in [provider][azure][config] component from infratemplate.yml file. [server_size] key defines the VM specifications that will be applied for all applications defined in [services][servers] component. If different VM specifications must be applied to each environment application, then [server_size] key must be set in [services][servers] component for each application. The detailed VM specifications can be viewed here . Note After making the required changes, commit and push them to your environment repository and trigger the rebuild. To make sure there are no syntax erros in the updated infratemplate.yml file, you can use this online validator . Changes that will require the deployment of your environment : Note The deployment operation will take around 5 minutes or more depending on your changes. To trigger the deployment of your environment, login to PaaS portal using your organisation user, go to your environment page and click on the Deploy button attached to Repository application. Changes related to roles already present in template. (i.e. an environment is already created with this template) If an already present role must be updated (for example, the tasks list for a role must be updated), make the required changes for that role, commit and push the changes to the environment repository and trigger the deployment. Changes related to roles tha represent a module/plugin/framework and not an application. New roles that represent a module/plugin/framework and not an application can be added to an application of your environment. In order to accomplish this, a new role along its settings must be created in /environments/common/roles folder and the new role must be added to the specific application in playbook.yml file from /environments/common/playbooks folder. After this, push all these changes to environment repository and trigger the deployment. Changes that are not related to environment template. For the changes described here that are not related to environment template, you just have to commit and push the required changes to your environment repository and trigger the deployment. Note If the deployment operation is not successful for your changes, please rebuild the environment. The PaaS catalogue of available templates can be cheched here . <!-- <br /><span style=\"font-size:20px\">text</span> -->"
  },
  "home/techguides/environment-creation-in-paas.html": {
    "href": "home/techguides/environment-creation-in-paas.html",
    "title": "Temenos Cloud Management of Organisations and Environments",
    "keywords": "Temenos Cloud Management of Organisations and Environments Organisation ID The Temenos Development Platform support multitenancy and Organisations are designed to be distinctive accounts. Upon subscription you'll receive a unique Organisation Id as a URL link such as: http://portal.staging.temenos.cloud:4200/organisations/1cg74hgepdevio/login The confirmation of your Organisation activation will contain the link and access instructions to your designated Organisation administrator. The administrator is the first and only user. Environments The Development platform has the capability to provision environments in a variety of different configurations. Users can initiate a new environment and select from a predefined list of templates the application, the release and stack they wish to provision. Each month we host a new template with the latest release of Temenos suite. The environments are customisable in terms of Name and brief description to explain their purpose. The templates follow the official Temenos configuration stack but it can be customised for Releases 2016 onwards. Create your own environment: Fill Name and Description fields Select one of the available templates from dropdown list, based on your requirements Click Create environment Templates Check the list with all available templates. These are latest Retail Suites versions:"
  },
  "home/techguides/fcm-configuration.html": {
    "href": "home/techguides/fcm-configuration.html",
    "title": "Configure FCM Application",
    "keywords": "Configure FCM Application Learn how to use FCM application by accessing it via Temenos Cloud Platform. Note Check also our Video tutorial About FCM Template Login to your organization on the Temenos Cloud Platform ( https://portal.temenos.cloud/ ) using the username and password provided by the Temenos team Each time you login, you must accept the Privacy Notice in order to have access to the portal First page that is displayed after login is the Environments list, where you can see the available environments or you can create a new one Click the Templates tab to see the list of all templates available for your organization Click FCM template to see the short description of the components and also the full template content The listed information comes from an infratemplate.yml file that describes the template used for an environment Create an Environment using the FCM Template Go to Environments tab and click New environment Fill the mandatory fields: Name Description Select an application from Cloud native applications Choose a template from Templates list Labels field is optional Click Create environment Note It will take about 15 minutes for the new environment to be created FCM Endpoints Check the two endpoints available in the FCM application: Financial Crime Mitigation Interfaces Module A new login is required when accessing the first endpoint (Financial Crime Mitigation) > Next you will see all available modules of the FCM Suite The Interfaces Module displays: The Pipelines The End Points The JSON configuration file Main steps to follow Connect to FCM using an SFTP server Place a message to be processed Check the processed message into the application Create a User on the Portal This is required later when logging to the FCM through SFTP server connection, because it checks the authentication to the cloud environment with that specific user and the attached SSH key. To see all the steps regarding how to add a new user on the portal and to attach the SSH key, please check the following user guide about how to Create Users . Connect via SFTP Client In order to connect to the FCM app, you can install an FTP client from https://winscp.net/eng/index.php Open WinSCP application and fill the mandatory fields: Host name > copy it from the environment endpoints User name > input the exact name of the user added to the portal Click Advanced In the new screen, select SSH Authentication Upload the private key previously saved (corresponding to the public key attached to the portal user) Click OK Previous screen pops-up, click Login Process Messages in the FCM Application On the right window, locate your envirnoment ID - Your organisation ID appears also on the top Double click to access the live folders of the environment > Go to screen_messages folder > mt > input < This is where you have to place the messages to be processed by dragging them from the location identified on the left window In current case, you can see a file \"messages.mtdemo.txt\" representing a swift message in the folder named \"mt demo\" on the desktop. From this location, the file is dragged into the right window in the input folder, from where the FCM application will instantly process it and remove/ delete it from this folder (the action won't be visible). Note Please note that, once the message is moved into the FCM folder ( input ), the application will instantly process it and remove/ delete it from this folder and the action might not be visible. When disconnecting and re-connecting to the server, the input folder will be empty. Check the Messages in Transaction Alert Manager Go to the portal to your environment Click Financial Crime Mitigation endpoint Go to Transaction Alert Manager Check below the latest processed messages and click Open button to see the message details"
  },
  "home/techguides/index.html": {
    "href": "home/techguides/index.html",
    "title": "Technical Guides",
    "keywords": "Technical Guides Here you have access to online documentation to help you develop and test the integration of your products through the Temenos Development Platform provided by Temenos Cloud."
  },
  "home/techguides/jenkins-build-promote-pipelines.html": {
    "href": "home/techguides/jenkins-build-promote-pipelines.html",
    "title": "Use Jenkins to Build Pipelines",
    "keywords": "Use Jenkins to Build Pipelines Note Check also our Video Tutorial ! Introduction This document explains how to configure the Jenkins build and promote pipelines. 'Build pipeline' builds the artifacts and deploys them in test environment. Once the testing is successful and it's ready for promotion, 'Promote pipeline' deploys the tested artifacts into integrated dev environment. For this tutorial, we will be integrating Jenkins with GitHub so that Jenkins can pull the code and build artifacts. To implement the Pipeline as a code we will use Jenkins Pipeline in order to automate tasks associated with building, testing and deploying software. Access Development Portal Sign into following URL: portal.temenos.cloud using the credentials provided by Temenos (Username and Password): Create a new environment Press 'New environment' Note You will need to create following three environments: • A build environment with template \"Build resources\" • A source environment with the required template ( in our example is \"Retail Suite R17.12(H2)\" ) • A target environment with the same template as the last one Fill the following parameters and press 'Create environment' : • Name • Description • Template • Labels (optional) Note It might take about 15 minutes to create the enviroment. The environment named 'Integrated Dev Environment' has been created: Login to Jenkins Click on the BUILD environment created (the first environment created - \"Build resources\") and then go to Jenkins Dashboard In the new screen, click Login button on the top-right corner: Sign in with user admin and password changeit Note After first login, you will need to change the password. Change the password Click on 'Admin' button on top-right corner and then, on the left side, click on 'Configure' button Input a new password, confirm it, click 'Apply' and then 'Save' Note In case of a coffee break during the Jenkins configuration, the session may expire. Make sure when you come back that you are still logged or login again. Build pipeline workflow Build Pipeline works based on pipeline script (Jenkins file). Requirements: It requires valid credentials to pull the code from your Git repository (Github/Gitlab..etc). Users need to add credentials to clone the git repositories. For setting up credentials please refer to below section \"Add SSH keys inside Jenkins\" Steps during build: Pulls the code from GIT Builds the artifacts using DS binaries Deploys the artifacts in the TEST environments Generate SSH key This section explains how to add the credentials in order to clone the Git repositories. The Jenkins Server requires a Source code repository, which will be taken from Github repository (or another kind of repository that you have), then a Developement environment and a Test environment. The dependencies between all of them are done through the ssh keys. The SSH key is used to authenticate between the Jenkins server and the environments. The keys solve different problems such as: user identification, security/ privacy and continuos integration and delivery best practices First, you will need a SSH key, which can be generated by using PuTTY: As instructed on PuTTY screen, move the mouse over the blank area to generate the key. PRIVATE KEY After the key is generated, go to Conversions tab and choose Export OpenSSH key (force new file format) PUBLIC KEY Click on Save private key button Later during Jenkins configurations, it will be necessary to use these SSH keys. To use the public key, you need to click right on the key saved (.ppk format) and select Edit with PuTTYgen Add user to the portal Go to portal.temenos.cloud Click on New user And fill the required fields Note Copy-paste the entire public key generated before and then delete the last part until equal sign and press Create user Add a second user to the portal The same as for the first user added, first make sure you generated a new SSH key and then: Go to portal.temenos.cloud Click on New user And fill the required fields Note Copy-paste the entire public key generated before and then delete the last part until equal sign and press Create user Add SSH key to GitLab repository We are using GitLab repository, but you can use a different one. In this repository you have to add the ssh keys for the users created in order to connect to Jenkins and build resources. The users created into the https://portal.temenos.cloud/ will be automatically added in the Gitlab repo. Log in to GitLab as an admin and follow below steps: Click on the key for admin area Go to users tab Search the users created ( example: cristina ) and press enter Click on the user name and then on the edit button on the right Set a password of minimum 8 chars and repeat password for confirmation, then Save changes Logout from admin menu and login with the new user and the password set before Change user password: Once you login, you will notice that it will be required automatically to setup a new password (Input your current password > Set a new password > Confirm it > Click Set new password After this step you will be automatically logged out and you need to login again with the new password Click on the user icon on the top-right corner and select 'Settings' Go to SSH Keys tab and paste the public key that you generated before as follows: paste the entire public key > you will notice that the Title field is automatically completed with the last part of the key ( rsa-key-20180731 ) delete the last part until equal sign and press Add key Repeat the same steps from this section ('Add SSH key to GitLab repository') for the second portal user that you created. Add user to your Gitlab project You also need to add the created user to your project and give full access: Note Repeat the same steps below also for the other user created in the portal Login back as an admin and go to admin area ( use settings button ) Click on Projects tab Then find your project Then Manage access on the right Then find your member (user), select Master from dropdown list to give full permission for this user and then Add to project Add credentials Inside Jenkins console, go to Credentials from left pane and then click global: Then add credentials: A new screen is open In the Kind box - click the dropdown button and select ‘SSH Username with private key’ Scope - you can leave the default option 'Global (Jenkins, node...)' Choose a username. In current case we have chosen ‘gituser1’ so that we can easily identify that it is associated with demorepo repository in GitHub. Go to Private Key field, select 'Enter directly' and paste the private key generated at previous step Click OK Add credentials for the second user Go to Credentials from left pane inside Jenkins console and then click global. Click 'Add credentials' and fill the required fields In the Kind box - click the dropdown button and select ‘SSH Username with private key’ Scope - you can leave the default option 'Global (Jenkins, node...)' Insert the second username you just added to the portal. Go to Private Key field, select 'Enter directly' and paste the private key generated at previous step Click OK Now if you click on credentials, you will see the following screen with both users details: Note This uniqe ID of SSH key will be used in the pipeline scripts (Jenkins File) to clone the repositories. Configure Jenkins pipeline job to use SSH keys Go to My View from left pane inside Jenkins console Click on 'Build' Then on 'Configure' And finally click on 'Pipeline' On the same screen, make sure you have the Jenkins File path in Script Path, then click on Apply and 'Save' Build the Jenkins job It’s time now to go ahead and build our job. Go to left pane inside Jenkins console and press 'Jenkins' button Then click on 'Built on' New screen is open. The following parameters are required to change according to your setup: • SrcRepo • EnvID (see the note below) • emailRecipientsList (optional) Click Build . Note The environment ID is the one that appears on the URL address after you login and you click on your environment: Build should be successful: Promote pipeline workflow Click on 'Promote Changes' Then on 'Configure' And finally click on 'Pipeline' Insert your repository URL ( in our example: git@staging-gitlab.temenos.cloud:root/Temenos-DS-Demo.git ) Credentials: use the second user that you added to the portal Script Path: PromoteChangesJenkinsFile Go again to left pane inside Jenkins console and press 'Jenkins' button Then click on 'Built on' button on 'Promote Changes' line New screen is open: Click Build ."
  },
  "home/techguides/t24-development.html": {
    "href": "home/techguides/t24-development.html",
    "title": "Introduction & Prerequisites",
    "keywords": "Introduction & Prerequisites This developer guide presents the required configurations and the main steps for the following actions: develop new/existent jBC routines and deploy them to your sandbox import/export applications/enquiries/versions from/to your sandbox to/from your local machine extract from the database/load in the database data (.d) files from/to your sandbox to/from your local machine. For this purpose, you need to have access to: Design Studio(locally) T24 libraries(locally) TAFJ (locally) Temenos Sandbox(cloud) Tortoise Git(locally) - download from here A development package (containing Design Studio, T24 libraries and TAFJ) is provided by Temenos and it is pre-configured in order to be able to introspect T24 application hosted in Temenos Could Development Dev-X. This package is adapted according to the T24 version of your sandbox and it is provided as a .zip file. After extracting it in your local machine to any location, the bellow folders and files should exist: The development package is pre-configured to be extracted in C:\\TemenosDev path. If the package is extracted in another path(Your_DEV_Path), make sure you make the bellow changes to the development package: in tafj.link file from Your_DEV_Path\\DesignStudio\\dropins folder, update the path variable with the new path to TAFJ\\eclipse folder.(make sure you use '/' as separator between folders) in tafj.properties from Your_DEV_Path\\TAFJ\\conf, update lines 13, 26 and 42 based on Your_DEV_Path. if a project already exists in your DesignStudio workspace, in Launch T24 Packager (TAFJ).launch file from Your_DEV_Path\\DesignStudio\\workspace\\YOUR-project-packager, lines 9, 10 and 11 must be updated accordingly to Your_Path. To be able to interrogate the sandbox database, a series of updates must be applied to tafj.properties file from Your_DEV_Path\\TAFJ\\conf: Property Value temn.tafj.jdbc.url jdbc:h2:tcp:// Your_Sandbox_Database_IP /TAFJDB;MODE=Oracle;TRACE_LEVEL_FILE=0; TRACE_LEVEL_SYSTEM_OUT=0;DB_CLOSE_ON_EXIT=FALSE;FILE_LOCK=NO; IFEXISTS=TRUE;CACHE_SIZE=131072;MVCC=TRUE;LOCK_TIMEOUT=30000 temn.tafj.jdbc.driver org.h2.Driver temn.tafj.jdbc.username t24 temn.tafj.jdbc.password t24 Note In order to get the database IP of your Sandbox, contact Temenos Cloud support team at CloudPlatformSupport@temenos.com. Create New Project in Design Studio In order to accomplish the development actions presented at the beginning of the guide, you need to create a new project in Design Studio. Start Design Studio from DesignStudio folder using StartDesignStudio.bat file and choose the default workspace (Your_DEV_Path\\DesignStudio\\workspace) or any other workspace from your local machine. After Design Studio starts, go to File > New > Project . Select Design Studio Template Project from Design Studio item and click Next . In the next screen, select t24-packager-tafj template from the drop down list and set tafjHome , insertDir and libDir parameters according to Your_DEV_Path. Note For project-name parameter, make sure you use small letters(ft-sample as per above example) and for component-name parameter, make sure you start the name with capital letters(FT-Sample as per above example). Click Finish to create the project and 4 modules will be created, as per bellow picture. -> ft-sample- data-code : holding basic routines and data files. -> ft-sample- models : holding Design Studio models(applications, enquiries, versions) that can be imported/exported from/to your sandbox. -> ft-sample- models-gen : holding files generated by Design Studio from the ft-sample- models project. -> ft-sample- packager : holding the launcher for creating a T24 package that can be deployed to your sandbox. Create New T24 Server in Design Studio A T24 Server is required in Design Studio to be able to import/export applications/enquiries/versions from/to your sandbox. Follow next steps to create and configure a T24 server: On servers tab, click right and select Add New T24 Server . A new screen is open. Type a name for the server(make sure it includes '-server' string) and click Next . Choose connection type as T24 Server-Web Service and click Finish . After the server is created, the server.properties must be updated according to your sandox details: -> In T24 User (deployment only) section, 2 users that you use to connect to your T24 sandbox must be introduced. -> In WebService (TAFJ) Connection section, Secured box must be checked, Protocol must be set to ws value, Hostname must be set according to the hostname of your sandbox, Port must be set to 443 value and Context to axis2 value. -> To get the hostname of your sandbox, log-in to your organisation in PaaS Portal, go to your enviroment page and click on the GO TO Application Endpoint for the T24 application. The BrowserWeb page of your sandbox is opened and from the URL of this page, you must select the part between https:// and /BrowserWeb/servlet/BrowserServlet . Toggle Project to TAFJ project nature The Toggle TAFJ project nature action must be performed in order to be able to develop, compile and package jBC routines and to interrogate your sandbox database. Right click on data-code module and choose Toggle TAFJ project nature . In the next screen, import tafj_properties from Your_DEV_Path/TAFJ/conf folder, choose TAFJ_HOME as Your_DEV_Path/TAFJ folder and click Next . In the bellow picture, DEV_Path is set to C:\\TemenosDEV. In the next screens, click Next and Finish . In the end, data-code module should be toggled. A .properties file was created for your project in Your_DEV_Path/TAFJ/conf folder. Note If TAFJ properties for your project must be updated, make sure you update the .properties related to your project from Your_DEV_Path/TAFJ/conf folder. jBC Routines Development jBC routines are developed in the data-code module which must be toggled to TAFJ project nature by following next steps. In order to create a new jBC routine, expand data-code module, go to src->Source->Private, right click on project name (FT_Sample in the above picture), select New and then New T24 routine / component / testcase . On next screen, type the name of the routine and click Finish . The new routine is created. Create a T24 package based on your project In order to deploy your developed routines in the sandbox, a T24 package must be created. Go to packager module in Design Studio workspace, right click on Launch T24 Packager (TAFJ).launch and choose Run As > Launch T24 Packager (TAFJ) . Wait for successfull build for the project. Check where the package was generated. Deploy a T24 package to Sandbox Note Make sure you cloned in your local machine the GitLab repository of your sandbox. Copy the generated package into the packages folder of the cloned GitLab repository from your local machine: If the package is a new file in the repository, the package must be first added to the repository: A screen will appear saying that the file was added. Press Commit : A new screen will appear. Insert a comment in the upper window and then choose Commit . A new screen will appear and choose Push . A new screen will appear and choose OK . A success message should be displayed. Press Close . Check jBC routines deployment to Sandbox Log-in to your organisation in PaaS Portal, go to your enviroment page and click on the Monitor Application Endpoint for the T24 application. The TAFJEE page is opened. Click tShow to check if your developed routines were deployed in your sandbox. Details like the compilation date or the jar that contains the class of those routines can be checked. In the next screen, input your routine name and click Submit . In the next screen, the details of your routine can be seen. Import T24 Applications, Enquiries and Versions Note In order to import Applications/Enquiries/Versions from your sandbox to your local machine, make sure you have a T24-server created and configured in Design Studio. Go to Servers tab, right click on your server state and change state to active . State should become active: Note The following example is about importing Enquiries from your sandbox to your local machine. The same steps can be aplied for Applications and Versions. After the T24-server is active, right click on the models module and choose Import : Expand Design Studio item, choose Import T24 Enquiries and click on Next button. (you have to wait until the list of enquiries is fetched from the sandbox database). Select from this list which enquiry you want to import from the sandbox to your local machine and click Next . Choose where to import the enquiry( Models folder from models module) and click Finish (wait until the operation is completed). A successful message will be displayed at the end and the enquiry will be saved in your local machine. Export T24 Applications, Enquiries and Versions Note The following example is about exporting Enquiries from your local machine to your sandbox. The same steps can be aplied for Applications and Versions. Note Make sure your T24 server is set to active . Right click on the models module and choose Design Studio -> Generate Code : A message should be displayed saying that the enquiry was successfully modified. Data (.d) files A data(.d) file represents a details viewer of a record from the database. A data file has 2 columns: -> first column contains the unique number of all table fields of the record; -> second column contains the values for all table fields of the record. Note Assuming that your date-code module is toggled to TAFJ project nature, make sure you update the .properties file related to your project from Your_DEV_Path/TAFJ/conf folder with the database IP of your sandbox. Before starting to extract/load data files from/to your sandbox database, you must login to TAFJ-DBTools. -> Right click on your data-code module and select DBTools login . -> A wizard will appear in which you must type the DBTools credentials(which can be found in Add_DBTools_User.bat file from Your_DEV_Path) and click Finish . Extract data files from the database Expand data-code module, go to src, right click on Data and select Extract from the database . The bellow wizard will appear. Make sure the URL of the Database contains the correct database IP of your sandbox. Otherwise, you have update your .properties file related to your project from Your_DEV_Path/TAFJ/conf folder. Type the Table Name and Record ID and click Finish . Check the console log to see if the data files was extracted. Load data files in the database Right click on your data file and select Load in the database . The bellow wizard will appear and click Finish . Make sure the URL of the Database contains the correct database IP of your sandbox. Otherwise, you have update your .properties file related to your project from Your_DEV_Path/TAFJ/conf folder. A success message should be displayed in the console."
  },
  "home/techguides/troubleshooting.html": {
    "href": "home/techguides/troubleshooting.html",
    "title": "Introduction",
    "keywords": "Introduction This user guide shows different ways of accessing details related to your development environment when deploying the following: Design Studio Packages Plugins Updates WAR files 1. Export Environment Details The Export Environment Details functionality gives you access to different information related to your sandbox like: -> the T24 UD (default) folder from your T24 sandbox -> the jars deployed in your T24 sandbox -> the war files deployed(with success or not) in your T24 sandbox -> the jboss server.log from your T24 sandbox. The environment details are exported in a SFTP server to which you have to connect in order to download the related files in your local machine. For this purpose, make sure you download and install WinSCP SFTP client. The Export Environment Details functionality can be triggered from PaaS Portal following the bellow steps: Log-in to your organisation in PaaS Portal, go to your enviroment page and click on the Export Environment button for the T24 application. After click, the Export Environment button will become disabled(as per bellow picture), meaning that the export was triggered. Note The Export Environment action is finished when the Export Environment button becomes enabled. In order to download the exported files of your environment from the SFTP server to your local machine: In PaaS Portal for your organisation, go to your environment page and Right click and copy the sftp.temenos.cloud Endpoint or click the copy to clipboard icon from the right: Open WinSCP SFTP client and create a new site that will allow you to connect to the SFTP server. Make sure you put sftp.temenos.cloud Endpoint as Host name, your PaaS user as User name and instead of password, the SSH key related to your PaaS user must be used. In order to attach the SSH key, press Advanced button, go to Authentification menu and select the private key related to your PaaS user. After attaching your SSH key, save your site with any name for future use. Click Login to connect to the SFTP server. If connection is successful, you will have 2 sections in WinSCP: -> the left section(highlighted in black) represents the location from your local machine where the environment details will be downloaded. -> the right section(highlighted in yellow) represents the location of the exported environment details in the SFTP server; the environment details are saved in the SFTP server in /organisationID/environmentID folder structure. Go inside your environmentID folder and you will see a zip file that contains the Environment Details. In order to download the zip, select it and press F5. After downloading the zip file to your local machine, unzip it and you will have the bellow folder structure: Based on the above folder structure, you can check the following: -> If you deployed any update in your sandbox, check if jar/jars related to the update are changed in the jar list from modules/com/temenos/t24/main folder. -> If you deployed any package in your sandbox, check if the jar related to the package is present in modules/com/temenos/t24/main/localjars folder. -> If you deployed any war file in your sandbox, check if the war was deployed with success(a file named war_name.deployed should be present in standalone\\deployments folder). The war deployment will be failed if a file named war_name.failed is present in standalone\\deployments folder and this file must be checked for details. 2. TAFJEE Monitoring Tool TAFJEE Monitoring Tool can be used in the following situations: -> To get the TAFJ installation details from your Environment (using tDiag Servlet) -> To get the compilation details for a T24 routine from your Environment (using tShow Servlet) -> To access various logs from your Environment like Database log or Runtime log (using Logger Servlet) -> To access como content from your Environment (using Como Servlet) -> To execute DBTools commands (using DBTools Servlet). To access the TAFJE Monitoring Tool for your Environment, log-in to your organisation in PaaS Portal, go to your enviroment page and click on the MONITOR APPLICATION Endpoint for the T24 application. The bellow page is opened from which various servlets can be accessed. TAFJ Environment Information To view various information about the TAFJ Environment from your Environment, access the TAFJ Monitoring Tool of your Environment from PaaS Portal and select tDiag option from the Diagnostic section. The next page is opened in which information like TAFJ installation details, Environment details, TAFJ Runtime properties, T24 Monitoring properties and TAFJ Session Monitor properties can be found. T24 Routine Information To view the compilation details for a T24 Routine from your Environment, access the TAFJ Monitoring Tool of your Environment from PaaS Portal and select tShow option from the Diagnostic section. The next page is opened in which you must enter the name of the T24 Routine. Click Submit to get the compilation details. The details like compilation date or the .jar file that contains the class of the T24 Routine are displayed. Logs Information To view different log files from your Environment (Database log/Runtime log), go to the TAFJ Monitoring Tool of your Environment from PaaS Portal and select Log files option from the Troubleshooting section. The next page is opened in which you can select any log from the list and change dynamically the log level (6 log levels are available: FATAL, ERROR, WARN, INFO, DEBUG, TRACE). For example, to view the Database log for a specific level, go to the Database log part of the page, choose the appropriate level and click View . The Database log information for the selected level is displayed. Note To change the log level for a specific logger, select from the Level Filter combo box the appropriate level and the page will be refreshed automatically based on the selected level. Como Information The TAFJ Monitoring Tool offers the possibility of viewing the log files generated when running different tSAs(Temenos Service Agents) or when installing T24 packages or T24 updates in your Environment. This is achieved with the aid of the Como servlet which provides direct access to the &COMO& folder content from your Environment. To view the Como content, go to the TAFJ Monitoring Tool of your Environment from the Development platform portal and select Como files option from the Troubleshooting section. The next page is opened in which you can select for which Como log do you want to View the details. In the bellow example, the Como log generated for installing a T24 package is displayed. Note Please note that you will get a picture of the &COMO& folder from your Environment at a point of time only and that there is no automatic refresh functionality. Thus, you must use the Refresh button to get latest state of Como logs. DBTools Information To interogate the Environment Database from TAFJEE tool with DBTools commands, go to the TAFJ Monitoring Tool of your Environment from Development platform portal and select DBTools option from the Execution section. A pop-up will appear in which JBOSS credentials must be introduce because the DBTools application can be accessed by authenticated users only. Note In case you do not have the required JBOSS/DBTools credentials, please contact MarketPlace team at marketplace-support@temenos.com. The next wizard will appear in which you can execute any DBTools command by following the next steps: -> Enter the DBTools user credentials in the Authentication section. -> In the Command section, select the command type from the Mode combo box, enter the command in the Argument field and optionally you can enter a name in the Log file name field. -> Click the Submit button to execute the command and a message will be displayed in the page. -> Depending on the command, an output will be generated and it will be available in the output list after pressing the Refresh button. For example, a JQL command is entered. After clicking the Submit button, a message is displayed. Click the Refresh button and in the Output section, a log(containing the result of the DBTools command) will be displayed. Click the View button related to the generated log to view the result of the DBTools command. 3. Import Data Eson instead of .d record - Fix \"sslHandshageException\" error While importing the data eson files, but also while importing the Enquiry, versions, etc. an error related to sslHandshageException may appear. To solve this error, follow below instructions: Add the certification to the cacerts of the jre inside DS tool by following below steps: Download the certification: open in your browser, for example Chrome, the T24 BrowserWeb click on \"Secure\" > Certificate > Details > Copy to File > Next > select Base-64 encoded X.509 (.CER) and click Next save the certification of the T24 area (example: we are saving it with the name **sharedSandboxCert.cer ) Close DS tool Copy the certification into <DS_path>\\jdk\\jre\\lib\\security location Go to <DS_path>\\jdk\\jre\\bin and, from a cmd window, run below command: keytool -keystore ../lib/security/cacerts -importcert -alias sharedSandbox -file ../lib/security/sharedSandboxCert.cer Start DS and try again to import the files - How to import data.eson instead of .d files Start the t24 server Right click on <projectName>-data-code Select Import > DesignStudio > Import T24 data Select the folder where you want the record to be added (usually it is added inside <projectName>-data-code > src > data > Model or <projectName>-data-code > src > data > Public location depending on the type of the record ) Select the Application, meaning the table name from T24 (example: CURRENCY) Type the Record Id (example: USD) Click on finish button You should obtain a record with the name like: GB0010001.CURRENCY!EUR.data.eson Note In order to ensure that the data.eson records will be added to the package while building it please do below steps: Open the pom.xml file from the <projectName>-packager Search for the line that is starting with <componentName> Under that line please add this line: <packageEsonAsCsv>true</packageEsonAsCsv> Save the file"
  },
  "home/techguides/use-gitlab-repository.html": {
    "href": "home/techguides/use-gitlab-repository.html",
    "title": "Introduction",
    "keywords": "Introduction This document can be used by technical staff who need to deploy different features on a Temenos Cloud Environment. Each Environment has an associated Repository for uploading different type of features based on Environment Template type, these features being deployed automatically to your Environment. Before proceeding, please check the following requirements: Make sure you have a GUI Git Client installed in your local machine. This guide uses TortoiseGit Git Client that can be installed from here . Make sure you have an user created under your organisation that has a public ssh key attached. Please check this guide to understand how you can create an user or how you can generate and attach a ssh key to an user. Clone Environment Repository • Please login to your organisation, select your environment and locate the Endpoint of Repository Application. Right click the endpoint and copy the link address or click the copy to clipboard icon from the right: • Create a folder in any location from your local machine. In the current example, a folder name GitLabRepo is used. • Go to your local repository folder(GitLabRepo folder in our example), right click inside the folder and choose Git Clone . • The bellow screen is opened where you have to paste the Endpoint of Repository Application of your Environment in URL textbox, set the Directory textbox to your local repository folder(GitLabRepo folder in our example) and load your private key. • Content is downloaded from the Repository of your Environment to your local machine. Repository Structure The repository structure on your local machine should look like this: Folder Functionality addons This folder is designed for AppDynamics. Upload files as JAR. client_files\\h2db Local H2 database that will be uploaded to the Cloud Environment. Database username must be t24 and password t24 (case sensitive). Database name is mandatory to be “TAFJDB.h2.db” (case sensitive) and must be archived as a ZIP with name TAFJDB.zip (case sensitive). If the above conditions are not satisfied, the database will not be uploaded to the Cloud Environment. This procedure will replace the existing database in the cloud with this one. The old database will be lost , including any records loaded manually. client_files\\helptext Custom Help Text files can be uploaded in this folder. The file structure must be the same as HELP.TEXT T24 core. Thus, under client_files\\helptext folder, the HelpText folder with subfolders for each component (AA, EB, PP, etc.) is expected. packages One or more T24 DS (Design Studio) packages can be uploaded into this folder. All packages will be deployed automatically inside T24. plugins WAR files can be uploaded in this folder. The files will be deployed inside Jboss EAP. In addition to this, endpoints related to plugins can be automatically added to an application. For more details, check this guide . updates The updates files downloaded from the portal in zip format. The files will be copied to the update folder and the T24 Update procedure is triggered. wsdl WSDL files and folders that are required by plug-ins (war file) need to be uploaded here. Additional folders The bellow folders are not present as default in environment repository. In any of the bellow functionalities is required, the folder related to that functionality must be first created in environment repository and only after this the functionality of the folder can be used. Folder Functionality client_files\\localjars This folder is designed for local JARs (not released by T24 Core) installation. Any JAR file used by T24 or other parties can be uploaded in this folder. During deployment, all JARs present in this folder will be deployed in the environment. If a JAR file is corrupted or some dependencies are missing, the environment will not start. client_files\\localjars\\ext This folder is designed for local JARs installation inside TAFJ/ext folder from the environment. Commit & Push features to Repository • Go to repository folder from your local machine(GitLabRepo folder in our example) and copy your file/files (related to your required features that must be deployed to your Environment) to the specific folder/folders based on your requirement. In this guide, an update is pushed to the Environment Repository. • To commit the files/files to Environment Repository, right click inside repository folder from your local machine and choose Git Commit -> \"master\"... option. • The following screen will appear in which your repository changes can be observed and commited. In order to commit, you have to input a commit message and check the checkbox next to each new file if it is the case. • The following screen will appear in which you have to push your changes to Environment Repository. In order to push, click the Push button. • In the next screen, you have to click Ok button. • Finally, the status screen for your push action is displayed. Trigger Deployment • After all required features are commited and pushed to Environment Repository, you have to deploy these features in your Environment. To do this, login to your organisation, select your environment, locate Repository Application and click the Deploy button. • The Environment and its manageable Applications status will be changed to Deploying during the deployment process. The logs generated by the deployment process can be also observed in the Events tab of your Environment where a new event for RepositoryDeploy will be created. Note The deployment process is triggered manually by the user after commiting and pushing all the required features in Environment Repository or whenever is appropiate based on the fact that the user can commit and push features to Environment Repository multiple times and choose when to trigger the deployment."
  },
  "home/techguides/user-creation-in-paas.html": {
    "href": "home/techguides/user-creation-in-paas.html",
    "title": "Introduction",
    "keywords": "Introduction This document can be used by technical staff who need to create Users on the Temenos Cloud Platfrom and associate to each user a ssh key. Users The Administrator can navigate to the Users section on the portal, create more users and invite them to access and use the portal using the URL link. This way the administrator is in control of who receives the URL link and which users can access the Organisation. The users can access their organisation only, view their user profiles and change their password. Should the users requires access to the source code repository they need to provide their public SSH Keys on the user profile section to gain access. Use PuTTY ssh client for ssh key generation. You can use any other ssh key generator client. Note If you already have installed a ssh key generator client, you can skip this step. • Download the installer from http://www.putty.org/ • Run the installer and click Next on each screen, without changing anything in configurations. Click Finish once completed. Create SSH keys (pair public and private keys) • Open PuTTYgen and click Generate button: • This creates a new ssh key by moving the mouse in the blank area(highlighted in red), as per bellow picture. • After Puttygen finished key generation, you can save your public key/private key in any location from your local machine. Note In order to have a valid ssh key that can be recognized by Infrastructure, do not use the Save pulic key button from Puttygen and just select the whole public key from the PuTTYgen screen and save it in your local machine. • From PuTTYgen screen, you must also save the private key. Press the Save private key button, choose Yes on the next prompt (save the key without a passphrase to protect it) and indicate a name and location for the private key. • The public/private key location on your local machine should look like this: Add users in portal with SSH key • Login to your organisation portal using the link and the credentials provided. • Click User menu and then New user button, as below: This will create a new user in your organisation. This new user will be automatically assigned to all GitLab Repositories from within all environments. If you have already a user created, you can click on the user and update the SSH key box with the one created above. • Public SSH key needs to be pasted in SSH Key text box. Open Windows Explorer and locate your public key generated using PuTTY Key Generator. • Right click and open it with notepad. Select all and copy to clipboard. • Paste the copied text into the SSH Key text box and click Create user button. Your username will be created in Gitlab server and public SSH key provided will be added to your account being accessible from all the environments created in your organisation. For further details or issues related to Gitlab SSH keys usage, or other operating systems (MAC, Linux), please consult this link: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Temenos Cloud Platform",
    "keywords": "Welcome to the Temenos Cloud Platform Temenos Cloud Platform is a suite of products offered by Temenos Cloud; it is a Platform as a Service (PaaS) that provides individuals and teams with the ability to manage and configure their own instances of Temenos applications and approved 3rd party Plug & Play applications from the Temenos ecosystem. Benefits Start development and testing in minutes, not weeks Immediate environment provisioning can acceleration all your projects Simple to reproduce identical environments from templates A subscription service that means you don't need to buy and manage expensive hardware Self-service environment provisioning that is able to provide your teams with autonomy or centralised control Services Development Platform is a cloud based service for use during development, test, implementation, and ongoing change with configurable and scalable Temenos Suites on-demand. Click here to find out more."
  },
  "home/architecture.html": {
    "href": "home/architecture.html",
    "title": "Architecture Overview",
    "keywords": "Architecture Overview Where does Temenos Development Platform fit into the enterprise IT landscape? The Temenos Development Platform promotes the concept of simplified and standardised change promotion through the IT landscape. Typical organisations have a number of non-production (i.e. development/test) environments, where changes are implemented and checked prior to deployment to production systems. The Devops movement seeks to improve this QA process through means of automation, which both allows an increase in speed in change promotion, and a reduction in the risk of manual errors when promoting changes. The Development Platform includes a simple and repeatable method of collating changes (both configuration and customisation) which subsequently is simple to promote from environment to environment. In addition, the core function of the Development Platform is to simplify the environment provisioning process, which means if extra stages in the change flow are required (e.g. for additional testing phases), it becomes far simpler to spin up temporary environments for these purposes. It should be noted that the Development platfrom only supplies non-production environments (also known as 'sandboxes'), which means organisations will still require at least one non-production environment on representative hardware in order to sanity check changes prior to production release (see example below). Delegating platform and infrastructure responsibilities to a third party allows organisations to concentrate on what is important to them - applications and data. The Development platform may be used for simple environment provisioning, or may be augmented by additional tools (such as Continuous Integration tooling) to provide a streamlined and automated development experience. The change promotion mechansim within the Development platform is simple to plug into standard CI tooling to push code/config/data from environment to environment. An example development flow is shown below: What are the components of Temenos Development Platform? Development & Testing environments are managed by the Development Portal, and are comprised of distinct components as described below: Component Description Portal The Portal is the front-end component of the Development Platform which allows users to perform management functions across development environments. These functions include user management and environment provisioning/scaling. Configuration Repository The Configuration Repository is the 'change hub' for the Development Platform. It supports configuration and customisation (per environment), including T24 updates, custom config/code packages, database imports and third party plug-ins/add-ons. T24 Instance The T24 instance comprises the application and database for T24. The application tier may be scaled horizontally as required (via the management facility in the Portal). Exports (File Storage) The T24 database may be exported via the management facility in the Portal, as may the 'environment' (file system level). These exports are stored per environment and may be downloaded by users via SFTP. What can you do with Temenos Development Platform? Below is a list of functions which can be performed using Temenos Development Platform. Function Description Provision a new environment Create an environment Scale an environment Scale a environment horizontally by adding/removing additional T24 instances for a given database instance Delete a environment Delete a environment Manage a user Create/ edit/ delete a user Apply configuration/ customisation Apply the necessary change components to create a customised environment configuration for an organisation Login to T24 Use the resultant customised environment Import a database Import a database into a environment Export a database Export a database from a environment (e.g. to re-import into another environment) Export an environment Export a copy of a environment (file system level) for offline perusal What tools do I need to use Temenos Development Platform? Below is a list of tools which may be used to exploit Temenos Development Platform functionality. Tool Description and Rationale Git Git (/ɡɪt/) is a version control system for tracking changes in computer files and coordinating work on those files among multiple people. A client program for Git is required to push artefacts into the configuration repository. SFTP Client SFTP is the protocol used to download file exports (environment or database exports) Continuous Integration Tool (Optional) Continuous Integration tools may be used to help automate change promotion between environments. There is no CI tool provided as part of the Temenos Development Platform, but these are useful in reducing manual tasks when managing environments. Design Studio (Optional) Design Studio is the IDE (Integrated Development Environment) produced by Temenos for developing changes in T24 systems. Design Studio itself does not form part of the Development Platform, but change outputs from this tool are supported within the Configuration Repository."
  },
  "home/benefits.html": {
    "href": "home/benefits.html",
    "title": "What are the benefits of Temenos Development Platform?",
    "keywords": "What are the benefits of Temenos Development Platform? Self-service environment provisioning, with centralised control to completely self-service Reduction in projects duration; by eliminating the time to create or wait for an environment Operational expense; subscription service Start development and testing in minutes, not weeks Simple to reproduce identical environments"
  },
  "home/create-dev-env-video.html": {
    "href": "home/create-dev-env-video.html",
    "title": "",
    "keywords": ""
  },
  "home/faq.html": {
    "href": "home/faq.html",
    "title": "Implementation FAQs",
    "keywords": "Implementation FAQs How can a customer gain access to Development Platform? The client should go through the normal procurement process for a Temenos Cloud service. Temenos regional sales. What are the minimum system requirements? Internet access over https. How can a customer deploy Temenos Development Platform? The clients will be supplied with a URL and initial login, from there they will be able to create their own environments at their chosen release, add users for a developer or team of developers and then they can create the environments immediately. The users can create up to the maximum number of environments purchased, once the environment is destroyed, another individual or team can create a new environment up to the maximum. Thus many users can share a single subscription, removing collaboration barriers accross the project team while supporting automated testing. Who will handle customers’ queries/issues for Development Platform? Sales queries will be handled via the Temenos Cloud (CloudPlatformSupport@temenos.com) support team. Support is available through a dedicated online support portal for cloud infrastructure issues. All Product issues remain through the Temenos Customer Support."
  },
  "home/index.html": {
    "href": "home/index.html",
    "title": "-----------------------------------------------",
    "keywords": "-----------------------------------------------"
  },
  "home/Legal.html": {
    "href": "home/Legal.html",
    "title": "Legal and Other Items",
    "keywords": "Legal and Other Items Dependencies for Using DevX Internet connection with access to DevX site pages / ports (all users) Web browser (all users) Git client (for developers) Git (/ɡɪt/) is a version control system for tracking changes in computer files and coordinating work on those files among multiple people. A client program for Git is required to push artefacts into the configuration repository SFTP client (for developers) A secure ftp (SFTP) client is required to download exported log files and data from an environment SSH key creation tools (for developers) Design Studio to modify core banking (T24) T24 licence – (TEMPLATES WILL ONLY BE MADE AVAILBLE FOR LICENSED PRODUCTS) Exclusions Custom Templates (see ‘Definitions’) – Request for service. Setup and Configuration of Continuous Integration / Continuous Deployment – automation tooling for building/deploying/testing software to environments. Source Code Management system – a tool to store and manage source code. Virtual Private Network (VPN) setup. A VPN is a secure tunnel between disparate networks across public internet (e.g. between Temenos’ Azure networks and Client networks). Design Studio – is the Temenos tooling used to develop changes for core banking (T24). Support and SLAs Initial support mechanism: email CloudPlatformSupport@temenos.com Future state support mechanism: Temenos cloud ticketing system SLAs: target 99% Uptime (can go down for maintenance, business hours) Warranties: Other SLAs as per Temenos Cloud Data retention: as defined in the Service Definition – data & environments can be deleted immediately by the user. All client-related data & environments will be deleted by Temenos 60 days after the termination of the agreement. Definitions Application – A Temenos product built to run in DevX (e.g. core banking) Template – a definition of an Application which may be provisioned into DevX. Includes information such as server size, basic server setup, Application/version to be provisioned, and technology stack used to run the Application. Environment – one or more running instances of an Application, all associated resources, and configuration. Associated resources include the Configuration Repository and the Exports file storage allocation. Organisation – the top level hierarchical unit to control access and groups of Environments User – a unit that represents a person or system linked to an Organisation; whose properties and credentials are checked to access an Organisation Subscription Limit - a number of environments that an Organisation is permitted to create"
  },
  "home/support.html": {
    "href": "home/support.html",
    "title": "Getting Support",
    "keywords": "Getting Support If you have questions or encounter an issue while working with the platform, please address your request to CloudPlatformSupport@temenos.com . Our support team will be able to resolve your issue faster if you can include: The time and date of the issue as applicable A complete description of the task, or series of steps for a task, that caused the issue Any other errors or screens shots as appropriate Additional help and resources Temenos application support should be logged through the Temenos Customer Support Portal . Please contact your local account manager for all sales and non-support related queries."
  },
  "home/temenos-cloud-templates.html": {
    "href": "home/temenos-cloud-templates.html",
    "title": "How Temenos Cloud Templates Work?",
    "keywords": "How Temenos Cloud Templates Work? The Temenos PaaS platform has the capability to provision environments in a variety of different configurations. This capability is driven through the concept of 'Templates' - a simplified view of the constituent elements which make up a sandbox configuration, including: Server Size Basic server setup and technology stack T24 version to deploy Templates are used by the provisioning service to create Sandbox environments with the desired configuration, as shown below: By default, new Templates are added with each monthly release of T24. These Templates follow a standard pattern, configuration and technology stack, but with the most recent releases of T24 being deployed. However, the Temenos Development platform team also offer the ability to create customised Templates for clients. For more information, please contact CloudPlatformSupport@temenos.com . Furthermore, please find below the current templates catalogue. The standard configuration of each template can be explored by clicking the required template from the list."
  },
  "home/add-features-to-environment-video.html": {
    "href": "home/add-features-to-environment-video.html",
    "title": "",
    "keywords": ""
  },
  "home/cloud-environments-customize-templates.html": {
    "href": "home/cloud-environments-customize-templates.html",
    "title": "",
    "keywords": ""
  },
  "home/export-import-database-video.html": {
    "href": "home/export-import-database-video.html",
    "title": "",
    "keywords": ""
  },
  "home/fcm-configuration-video.html": {
    "href": "home/fcm-configuration-video.html",
    "title": "",
    "keywords": ""
  },
  "home/jenkins-build-video.html": {
    "href": "home/jenkins-build-video.html",
    "title": "",
    "keywords": ""
  },
  "home/overview.html": {
    "href": "home/overview.html",
    "title": "What is Temenos Development Platform?",
    "keywords": "What is Temenos Development Platform? Temenos Development Platform is a product within the Temenos Cloud Platform suite, and is cloud based infrastructure for use during development, test, implementation, and ongoing change with configurable and scalable Temenos Suites on-demand, unless otherwise stated. The Development Platform enables you to create Environments, i.e. Temenos Suites on-demand, for non-production use in the cloud. Environments can be requested and provisioned within minutes rather than weeks helping you accelerate your projects. Retail Suite is readily available, with all other Temenos Suites (Corporate, Wealth, Micro-Finance and Islamic Banking) available on request and allows you to develop and test your proof of concept, share development environments across dispersed teams, replicate production environments or use them for training. The speed, reliability, and agility of these environments will instantly add value to your implementation and scale your project delivery capacity. Features Self-service environment provisioning An authenticated user, e.g. a developer or tester, has the ability to request an environment from the catalogue of templates ; this template will be materialised into compute, storage, and networks on the Temenos Cloud. See architecture . The administrator, e.g. the project manager, is in control of number of the users and maximum number of running environments, thus having total control of the platform and its usage. Secure configuration and environment management A developer, is able to configure a personal SSH Key on their user profile and use this key to securely push changes over SSH. Deployment of change into the environment is fully automated for configuration, updates, plugins, add-ons and data. These changes can be stored in a software configuration management repository and deployed to the environment via a Continuous Integration / Continuous Deployment process. Controlling the environment A user is able to scale up, scale down, start, stop, delete, and export data from an environment. Furthermore, a user is able to push a database into the configuration repository and rebuild the environment, thereby refreshing the database back to that point in time and re-apply transactions and configuration as required. As an example, a developer or a tester can load a database and collaborate to validate changes and test cases in a shared environment. Should these users need to delete or migrate an environment, they can export the data, create a fresh environment with the latest release, upload the data and continue working all managed through the portal. When development activity requires additional resources, the users can easily scale up the environments and equally reduce capacity or stop it entirely. Monitoring the environment A user can export the application log data, monitor the status of the environments (started, starting, stopped, stopping, rebuilding), and see the results of any application deployments. Controlling the application The Temenos core banking template exposes endpoints for the user interface and TAFJEE management screens that allows a user to control COB job services. Managed Resources Users Each user has their own profile within an Organisation. Please check here more details about Users. Environments An environment is an instance of an application and the platform provides the facilities to manage the application configuration. Organisations The users of the platform can provision and manage the environments within their Organisation. Please check here for more details about Temenos Cloud management of Organisations and Environments. Templates Environments can be provisioned using a variety of pre-defined application, processing, storage, network, and operating system configurations. Please check here for more details. Data and Security Considerations The Temenos Development Platform is for non-production use only , unless otherwise stated. No 'personal data'; 'confidential' or 'sensitive' data should be stored on any Environment. • Data is stored in UK datacentres • Data is encrypted in transit • Access to management facilities requires username/password and/or SSH certificates • Environments can be deleted immediately by the user. All client-related data will be deleted by Temenos 60 days after the termination of the agreement"
  }
}